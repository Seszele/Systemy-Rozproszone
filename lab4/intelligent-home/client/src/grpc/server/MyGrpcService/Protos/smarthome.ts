// @generated by protobuf-ts 2.9.0 with parameter generate_dependencies
// @generated from protobuf file "server/MyGrpcService/Protos/smarthome.proto" (package "smarthome", syntax proto3)
// tslint:disable
import { Empty } from "../../../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message smarthome.ListDevicesRequest
 */
export interface ListDevicesRequest {
}
/**
 * @generated from protobuf message smarthome.ListDevicesResponse
 */
export interface ListDevicesResponse {
    /**
     * @generated from protobuf field: repeated smarthome.DeviceInfo devices = 1;
     */
    devices: DeviceInfo[];
}
/**
 * @generated from protobuf message smarthome.DeviceInfo
 */
export interface DeviceInfo {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * @generated from protobuf field: smarthome.SpeakerSubtype speakerSubtype = 3;
     */
    speakerSubtype?: SpeakerSubtype;
}
/**
 * @generated from protobuf message smarthome.DeviceStatusRequest
 */
export interface DeviceStatusRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message smarthome.DeviceStatusResponse
 */
export interface DeviceStatusResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string status = 2;
     */
    status: string;
}
/**
 * @generated from protobuf message smarthome.TemperatureRequest
 */
export interface TemperatureRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message smarthome.TemperatureResponse
 */
export interface TemperatureResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: float temperature = 2;
     */
    temperature: number;
}
/**
 * @generated from protobuf message smarthome.ImageRequest
 */
export interface ImageRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message smarthome.ImageResponse
 */
export interface ImageResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bytes imageData = 2;
     */
    imageData: Uint8Array;
}
/**
 * @generated from protobuf message smarthome.PTZControlRequest
 */
export interface PTZControlRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: smarthome.PTZControl control = 2;
     */
    control: PTZControl;
}
/**
 * @generated from protobuf message smarthome.PTZControlResponse
 */
export interface PTZControlResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool success = 2;
     */
    success: boolean;
}
/**
 * @generated from protobuf message smarthome.SpeakerRequest
 */
export interface SpeakerRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message smarthome.SpeakerVolumeResponse
 */
export interface SpeakerVolumeResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int32 volume = 2;
     */
    volume: number;
}
/**
 * @generated from protobuf message smarthome.SpeakerVolumeRequest
 */
export interface SpeakerVolumeRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int32 volume = 2;
     */
    volume: number;
}
/**
 * @generated from protobuf message smarthome.AudioStatusResponse
 */
export interface AudioStatusResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool playing = 2;
     */
    playing: boolean;
}
/**
 * Smart speaker subtypes
 *
 * @generated from protobuf message smarthome.SpeakerSubtype
 */
export interface SpeakerSubtype {
    /**
     * @generated from protobuf oneof: subtype
     */
    subtype: {
        oneofKind: "basic";
        /**
         * @generated from protobuf field: smarthome.BasicSpeaker basic = 1;
         */
        basic: BasicSpeaker;
    } | {
        oneofKind: "bluetooth";
        /**
         * @generated from protobuf field: smarthome.BluetoothSpeaker bluetooth = 2;
         */
        bluetooth: BluetoothSpeaker;
    } | {
        oneofKind: "wifi";
        /**
         * @generated from protobuf field: smarthome.WiFiSpeaker wifi = 3;
         */
        wifi: WiFiSpeaker;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message smarthome.BasicSpeaker
 */
export interface BasicSpeaker {
}
/**
 * @generated from protobuf message smarthome.BluetoothSpeaker
 */
export interface BluetoothSpeaker {
    /**
     * @generated from protobuf field: string bluetoothAddress = 1;
     */
    bluetoothAddress: string;
}
/**
 * @generated from protobuf message smarthome.WiFiSpeaker
 */
export interface WiFiSpeaker {
    /**
     * @generated from protobuf field: string ipAddress = 1;
     */
    ipAddress: string;
}
/**
 * @generated from protobuf enum smarthome.PTZControl
 */
export enum PTZControl {
    /**
     * @generated from protobuf enum value: PAN_LEFT = 0;
     */
    PAN_LEFT = 0,
    /**
     * @generated from protobuf enum value: PAN_RIGHT = 1;
     */
    PAN_RIGHT = 1,
    /**
     * @generated from protobuf enum value: TILT_UP = 2;
     */
    TILT_UP = 2,
    /**
     * @generated from protobuf enum value: TILT_DOWN = 3;
     */
    TILT_DOWN = 3,
    /**
     * @generated from protobuf enum value: ZOOM_IN = 4;
     */
    ZOOM_IN = 4,
    /**
     * @generated from protobuf enum value: ZOOM_OUT = 5;
     */
    ZOOM_OUT = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class ListDevicesRequest$Type extends MessageType<ListDevicesRequest> {
    constructor() {
        super("smarthome.ListDevicesRequest", []);
    }
    create(value?: PartialMessage<ListDevicesRequest>): ListDevicesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDevicesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDevicesRequest): ListDevicesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListDevicesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.ListDevicesRequest
 */
export const ListDevicesRequest = new ListDevicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDevicesResponse$Type extends MessageType<ListDevicesResponse> {
    constructor() {
        super("smarthome.ListDevicesResponse", [
            { no: 1, name: "devices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeviceInfo }
        ]);
    }
    create(value?: PartialMessage<ListDevicesResponse>): ListDevicesResponse {
        const message = { devices: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDevicesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDevicesResponse): ListDevicesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated smarthome.DeviceInfo devices */ 1:
                    message.devices.push(DeviceInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDevicesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated smarthome.DeviceInfo devices = 1; */
        for (let i = 0; i < message.devices.length; i++)
            DeviceInfo.internalBinaryWrite(message.devices[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.ListDevicesResponse
 */
export const ListDevicesResponse = new ListDevicesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceInfo$Type extends MessageType<DeviceInfo> {
    constructor() {
        super("smarthome.DeviceInfo", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "speakerSubtype", kind: "message", T: () => SpeakerSubtype }
        ]);
    }
    create(value?: PartialMessage<DeviceInfo>): DeviceInfo {
        const message = { id: "", type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeviceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceInfo): DeviceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* smarthome.SpeakerSubtype speakerSubtype */ 3:
                    message.speakerSubtype = SpeakerSubtype.internalBinaryRead(reader, reader.uint32(), options, message.speakerSubtype);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* smarthome.SpeakerSubtype speakerSubtype = 3; */
        if (message.speakerSubtype)
            SpeakerSubtype.internalBinaryWrite(message.speakerSubtype, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.DeviceInfo
 */
export const DeviceInfo = new DeviceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceStatusRequest$Type extends MessageType<DeviceStatusRequest> {
    constructor() {
        super("smarthome.DeviceStatusRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceStatusRequest>): DeviceStatusRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeviceStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceStatusRequest): DeviceStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.DeviceStatusRequest
 */
export const DeviceStatusRequest = new DeviceStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceStatusResponse$Type extends MessageType<DeviceStatusResponse> {
    constructor() {
        super("smarthome.DeviceStatusResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceStatusResponse>): DeviceStatusResponse {
        const message = { id: "", status: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeviceStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceStatusResponse): DeviceStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.DeviceStatusResponse
 */
export const DeviceStatusResponse = new DeviceStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemperatureRequest$Type extends MessageType<TemperatureRequest> {
    constructor() {
        super("smarthome.TemperatureRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TemperatureRequest>): TemperatureRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TemperatureRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemperatureRequest): TemperatureRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemperatureRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.TemperatureRequest
 */
export const TemperatureRequest = new TemperatureRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemperatureResponse$Type extends MessageType<TemperatureResponse> {
    constructor() {
        super("smarthome.TemperatureResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "temperature", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<TemperatureResponse>): TemperatureResponse {
        const message = { id: "", temperature: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TemperatureResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemperatureResponse): TemperatureResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* float temperature */ 2:
                    message.temperature = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemperatureResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* float temperature = 2; */
        if (message.temperature !== 0)
            writer.tag(2, WireType.Bit32).float(message.temperature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.TemperatureResponse
 */
export const TemperatureResponse = new TemperatureResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageRequest$Type extends MessageType<ImageRequest> {
    constructor() {
        super("smarthome.ImageRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ImageRequest>): ImageRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageRequest): ImageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.ImageRequest
 */
export const ImageRequest = new ImageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageResponse$Type extends MessageType<ImageResponse> {
    constructor() {
        super("smarthome.ImageResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "imageData", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ImageResponse>): ImageResponse {
        const message = { id: "", imageData: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageResponse): ImageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bytes imageData */ 2:
                    message.imageData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bytes imageData = 2; */
        if (message.imageData.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.imageData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.ImageResponse
 */
export const ImageResponse = new ImageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PTZControlRequest$Type extends MessageType<PTZControlRequest> {
    constructor() {
        super("smarthome.PTZControlRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "control", kind: "enum", T: () => ["smarthome.PTZControl", PTZControl] }
        ]);
    }
    create(value?: PartialMessage<PTZControlRequest>): PTZControlRequest {
        const message = { id: "", control: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PTZControlRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PTZControlRequest): PTZControlRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* smarthome.PTZControl control */ 2:
                    message.control = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PTZControlRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* smarthome.PTZControl control = 2; */
        if (message.control !== 0)
            writer.tag(2, WireType.Varint).int32(message.control);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.PTZControlRequest
 */
export const PTZControlRequest = new PTZControlRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PTZControlResponse$Type extends MessageType<PTZControlResponse> {
    constructor() {
        super("smarthome.PTZControlResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PTZControlResponse>): PTZControlResponse {
        const message = { id: "", success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PTZControlResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PTZControlResponse): PTZControlResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool success */ 2:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PTZControlResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool success = 2; */
        if (message.success !== false)
            writer.tag(2, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.PTZControlResponse
 */
export const PTZControlResponse = new PTZControlResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpeakerRequest$Type extends MessageType<SpeakerRequest> {
    constructor() {
        super("smarthome.SpeakerRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SpeakerRequest>): SpeakerRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpeakerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpeakerRequest): SpeakerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpeakerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.SpeakerRequest
 */
export const SpeakerRequest = new SpeakerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpeakerVolumeResponse$Type extends MessageType<SpeakerVolumeResponse> {
    constructor() {
        super("smarthome.SpeakerVolumeResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "volume", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SpeakerVolumeResponse>): SpeakerVolumeResponse {
        const message = { id: "", volume: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpeakerVolumeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpeakerVolumeResponse): SpeakerVolumeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int32 volume */ 2:
                    message.volume = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpeakerVolumeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int32 volume = 2; */
        if (message.volume !== 0)
            writer.tag(2, WireType.Varint).int32(message.volume);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.SpeakerVolumeResponse
 */
export const SpeakerVolumeResponse = new SpeakerVolumeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpeakerVolumeRequest$Type extends MessageType<SpeakerVolumeRequest> {
    constructor() {
        super("smarthome.SpeakerVolumeRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "volume", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SpeakerVolumeRequest>): SpeakerVolumeRequest {
        const message = { id: "", volume: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpeakerVolumeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpeakerVolumeRequest): SpeakerVolumeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int32 volume */ 2:
                    message.volume = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpeakerVolumeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int32 volume = 2; */
        if (message.volume !== 0)
            writer.tag(2, WireType.Varint).int32(message.volume);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.SpeakerVolumeRequest
 */
export const SpeakerVolumeRequest = new SpeakerVolumeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioStatusResponse$Type extends MessageType<AudioStatusResponse> {
    constructor() {
        super("smarthome.AudioStatusResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "playing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AudioStatusResponse>): AudioStatusResponse {
        const message = { id: "", playing: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioStatusResponse): AudioStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool playing */ 2:
                    message.playing = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool playing = 2; */
        if (message.playing !== false)
            writer.tag(2, WireType.Varint).bool(message.playing);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.AudioStatusResponse
 */
export const AudioStatusResponse = new AudioStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpeakerSubtype$Type extends MessageType<SpeakerSubtype> {
    constructor() {
        super("smarthome.SpeakerSubtype", [
            { no: 1, name: "basic", kind: "message", oneof: "subtype", T: () => BasicSpeaker },
            { no: 2, name: "bluetooth", kind: "message", oneof: "subtype", T: () => BluetoothSpeaker },
            { no: 3, name: "wifi", kind: "message", oneof: "subtype", T: () => WiFiSpeaker }
        ]);
    }
    create(value?: PartialMessage<SpeakerSubtype>): SpeakerSubtype {
        const message = { subtype: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpeakerSubtype>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpeakerSubtype): SpeakerSubtype {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* smarthome.BasicSpeaker basic */ 1:
                    message.subtype = {
                        oneofKind: "basic",
                        basic: BasicSpeaker.internalBinaryRead(reader, reader.uint32(), options, (message.subtype as any).basic)
                    };
                    break;
                case /* smarthome.BluetoothSpeaker bluetooth */ 2:
                    message.subtype = {
                        oneofKind: "bluetooth",
                        bluetooth: BluetoothSpeaker.internalBinaryRead(reader, reader.uint32(), options, (message.subtype as any).bluetooth)
                    };
                    break;
                case /* smarthome.WiFiSpeaker wifi */ 3:
                    message.subtype = {
                        oneofKind: "wifi",
                        wifi: WiFiSpeaker.internalBinaryRead(reader, reader.uint32(), options, (message.subtype as any).wifi)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpeakerSubtype, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* smarthome.BasicSpeaker basic = 1; */
        if (message.subtype.oneofKind === "basic")
            BasicSpeaker.internalBinaryWrite(message.subtype.basic, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* smarthome.BluetoothSpeaker bluetooth = 2; */
        if (message.subtype.oneofKind === "bluetooth")
            BluetoothSpeaker.internalBinaryWrite(message.subtype.bluetooth, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* smarthome.WiFiSpeaker wifi = 3; */
        if (message.subtype.oneofKind === "wifi")
            WiFiSpeaker.internalBinaryWrite(message.subtype.wifi, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.SpeakerSubtype
 */
export const SpeakerSubtype = new SpeakerSubtype$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BasicSpeaker$Type extends MessageType<BasicSpeaker> {
    constructor() {
        super("smarthome.BasicSpeaker", []);
    }
    create(value?: PartialMessage<BasicSpeaker>): BasicSpeaker {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BasicSpeaker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasicSpeaker): BasicSpeaker {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BasicSpeaker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.BasicSpeaker
 */
export const BasicSpeaker = new BasicSpeaker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BluetoothSpeaker$Type extends MessageType<BluetoothSpeaker> {
    constructor() {
        super("smarthome.BluetoothSpeaker", [
            { no: 1, name: "bluetoothAddress", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BluetoothSpeaker>): BluetoothSpeaker {
        const message = { bluetoothAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BluetoothSpeaker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BluetoothSpeaker): BluetoothSpeaker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bluetoothAddress */ 1:
                    message.bluetoothAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BluetoothSpeaker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bluetoothAddress = 1; */
        if (message.bluetoothAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bluetoothAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.BluetoothSpeaker
 */
export const BluetoothSpeaker = new BluetoothSpeaker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WiFiSpeaker$Type extends MessageType<WiFiSpeaker> {
    constructor() {
        super("smarthome.WiFiSpeaker", [
            { no: 1, name: "ipAddress", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WiFiSpeaker>): WiFiSpeaker {
        const message = { ipAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WiFiSpeaker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WiFiSpeaker): WiFiSpeaker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ipAddress */ 1:
                    message.ipAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WiFiSpeaker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ipAddress = 1; */
        if (message.ipAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ipAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message smarthome.WiFiSpeaker
 */
export const WiFiSpeaker = new WiFiSpeaker$Type();
/**
 * @generated ServiceType for protobuf service smarthome.DeviceManager
 */
export const DeviceManager = new ServiceType("smarthome.DeviceManager", [
    { name: "ListDevices", options: {}, I: ListDevicesRequest, O: ListDevicesResponse },
    { name: "GetDeviceStatus", options: {}, I: DeviceStatusRequest, O: DeviceStatusResponse }
]);
/**
 * @generated ServiceType for protobuf service smarthome.TemperatureSensor
 */
export const TemperatureSensor = new ServiceType("smarthome.TemperatureSensor", [
    { name: "GetTemperature", options: {}, I: TemperatureRequest, O: TemperatureResponse }
]);
/**
 * @generated ServiceType for protobuf service smarthome.Camera
 */
export const Camera = new ServiceType("smarthome.Camera", [
    { name: "GetImage", options: {}, I: ImageRequest, O: ImageResponse },
    { name: "ControlPTZ", options: {}, I: PTZControlRequest, O: PTZControlResponse }
]);
/**
 * @generated ServiceType for protobuf service smarthome.SmartSpeaker
 */
export const SmartSpeaker = new ServiceType("smarthome.SmartSpeaker", [
    { name: "GetVolume", options: {}, I: SpeakerRequest, O: SpeakerVolumeResponse },
    { name: "SetVolume", options: {}, I: SpeakerVolumeRequest, O: Empty },
    { name: "PlayAudio", options: {}, I: SpeakerRequest, O: Empty },
    { name: "PauseAudio", options: {}, I: SpeakerRequest, O: Empty },
    { name: "GetAudioStatus", options: {}, I: SpeakerRequest, O: AudioStatusResponse }
]);
