//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Demo
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Operations : global::Ice.Object, OperationsOperations_
    {
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Operations_simpleOperation();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Operations_operationWithArgs(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Operations_processData(byte[] ret);
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface OperationsPrx : global::Ice.ObjectPrx
    {
        void simpleOperation(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task simpleOperationAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Operations_simpleOperation> begin_simpleOperation(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_simpleOperation(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_simpleOperation(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_simpleOperation(global::Ice.AsyncResult asyncResult);

        string operationWithArgs(string arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string> operationWithArgsAsync(string arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Operations_operationWithArgs> begin_operationWithArgs(string arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_operationWithArgs(string arg1, int arg2, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_operationWithArgs(string arg1, int arg2, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_operationWithArgs(global::Ice.AsyncResult asyncResult);

        byte[] processData(byte[] data, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<byte[]> processDataAsync(byte[] data, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Operations_processData> begin_processData(byte[] data, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_processData(byte[] data, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_processData(byte[] data, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        byte[] end_processData(global::Ice.AsyncResult asyncResult);
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface OperationsOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void simpleOperation(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        string operationWithArgs(string arg1, int arg2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        byte[] processData(byte[] data, global::Ice.Current current = null);
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public sealed class ComplexDataHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    [global::System.Serializable]
    public sealed class OperationsPrxHelper : global::Ice.ObjectPrxHelperBase, OperationsPrx
    {
        public OperationsPrxHelper()
        {
        }

        public OperationsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void simpleOperation(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_simpleOperationAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string operationWithArgs(string arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_operationWithArgsAsync(arg1, arg2, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] processData(byte[] data, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_processDataAsync(data, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task simpleOperationAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_simpleOperationAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_simpleOperationAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_simpleOperation(context, synchronous, completed);
            return completed.Task;
        }

        private const string _simpleOperation_name = "simpleOperation";

        private void _iceI_simpleOperation(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _simpleOperation_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<string> operationWithArgsAsync(string arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_operationWithArgsAsync(arg1, arg2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_operationWithArgsAsync(string iceP_arg1, int iceP_arg2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_operationWithArgs_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_operationWithArgs(iceP_arg1, iceP_arg2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _operationWithArgs_name = "operationWithArgs";

        private void _iceI_operationWithArgs(string iceP_arg1, int iceP_arg2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _operationWithArgs_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_arg1);
                    ostr.writeInt(iceP_arg2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<byte[]> processDataAsync(byte[] data, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_processDataAsync(data, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte[]> _iceI_processDataAsync(byte[] iceP_data, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_processData_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
            _iceI_processData(iceP_data, context, synchronous, completed);
            return completed.Task;
        }

        private const string _processData_name = "processData";

        private void _iceI_processData(byte[] iceP_data, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte[]>(completed);
            outAsync.invoke(
                _processData_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ComplexDataHelper.write(ostr, iceP_data);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    byte[] ret;
                    ret = ComplexDataHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Operations_simpleOperation> begin_simpleOperation(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_simpleOperation(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_simpleOperation(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_simpleOperation(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_simpleOperation(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_simpleOperation(context, callback, cookie, false);
        }

        public void end_simpleOperation(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _simpleOperation_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Operations_simpleOperation> begin_simpleOperation(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Operations_simpleOperation, object>(
                (Callback_Operations_simpleOperation cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _simpleOperation_name, cookie, completedCallback);
            _iceI_simpleOperation(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Operations_operationWithArgs> begin_operationWithArgs(string arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_operationWithArgs(arg1, arg2, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_operationWithArgs(string arg1, int arg2, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_operationWithArgs(arg1, arg2, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_operationWithArgs(string arg1, int arg2, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_operationWithArgs(arg1, arg2, context, callback, cookie, false);
        }

        public string end_operationWithArgs(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _operationWithArgs_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Operations_operationWithArgs> begin_operationWithArgs(string iceP_arg1, int iceP_arg2, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_operationWithArgs_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Operations_operationWithArgs, string>(
                (Callback_Operations_operationWithArgs cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _operationWithArgs_name, cookie, completedCallback);
            _iceI_operationWithArgs(iceP_arg1, iceP_arg2, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Operations_processData> begin_processData(byte[] data, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_processData(data, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_processData(byte[] data, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_processData(data, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_processData(byte[] data, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_processData(data, context, callback, cookie, false);
        }

        public byte[] end_processData(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _processData_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Operations_processData> begin_processData(byte[] iceP_data, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_processData_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Operations_processData, byte[]>(
                (Callback_Operations_processData cb, byte[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _processData_name, cookie, completedCallback);
            _iceI_processData(iceP_data, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static OperationsPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OperationsPrx r = b as OperationsPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                OperationsPrxHelper h = new OperationsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static OperationsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            OperationsPrx r = b as OperationsPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                OperationsPrxHelper h = new OperationsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static OperationsPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    OperationsPrxHelper h = new OperationsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OperationsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    OperationsPrxHelper h = new OperationsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OperationsPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OperationsPrx r = b as OperationsPrx;
            if(r == null)
            {
                OperationsPrxHelper h = new OperationsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static OperationsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            OperationsPrxHelper h = new OperationsPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::Operations",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, OperationsPrx v)
        {
            ostr.writeProxy(v);
        }

        public static OperationsPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                OperationsPrxHelper result = new OperationsPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Demo
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public abstract class OperationsDisp_ : global::Ice.ObjectImpl, Operations
    {
        #region Slice operations

        public abstract void simpleOperation(global::Ice.Current current = null);

        public abstract string operationWithArgs(string arg1, int arg2, global::Ice.Current current = null);

        public abstract byte[] processData(byte[] data, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::Operations",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_simpleOperation(Operations obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.simpleOperation(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_operationWithArgs(Operations obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_arg1;
            int iceP_arg2;
            iceP_arg1 = istr.readString();
            iceP_arg2 = istr.readInt();
            inS.endReadParams();
            var ret = obj.operationWithArgs(iceP_arg1, iceP_arg2, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_processData(Operations obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_data;
            iceP_data = ComplexDataHelper.read(istr);
            inS.endReadParams();
            var ret = obj.processData(iceP_data, current);
            var ostr = inS.startWriteParams();
            ComplexDataHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "operationWithArgs",
            "processData",
            "simpleOperation"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_operationWithArgs(this, inS, current);
                }
                case 5:
                {
                    return iceD_processData(this, inS, current);
                }
                case 6:
                {
                    return iceD_simpleOperation(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
