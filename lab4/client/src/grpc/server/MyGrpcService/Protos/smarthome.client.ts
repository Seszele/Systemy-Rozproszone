// @generated by protobuf-ts 2.9.0 with parameter generate_dependencies
// @generated from protobuf file "server/MyGrpcService/Protos/smarthome.proto" (package "smarthome", syntax proto3)
// tslint:disable
import { SmartSpeaker } from "./smarthome";
import type { AudioStatusResponse } from "./smarthome";
import type { Empty } from "../../../google/protobuf/empty";
import type { SpeakerVolumeRequest } from "./smarthome";
import type { SpeakerVolumeResponse } from "./smarthome";
import type { SpeakerRequest } from "./smarthome";
import { Camera } from "./smarthome";
import type { PTZControlResponse } from "./smarthome";
import type { PTZControlRequest } from "./smarthome";
import type { ImageResponse } from "./smarthome";
import type { ImageRequest } from "./smarthome";
import { TemperatureSensor } from "./smarthome";
import type { TemperatureResponse } from "./smarthome";
import type { TemperatureRequest } from "./smarthome";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DeviceManager } from "./smarthome";
import type { DeviceStatusResponse } from "./smarthome";
import type { DeviceStatusRequest } from "./smarthome";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListDevicesResponse } from "./smarthome";
import type { ListDevicesRequest } from "./smarthome";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Base service for all devices
 *
 * @generated from protobuf service smarthome.DeviceManager
 */
export interface IDeviceManagerClient {
    /**
     * @generated from protobuf rpc: ListDevices(smarthome.ListDevicesRequest) returns (smarthome.ListDevicesResponse);
     */
    listDevices(input: ListDevicesRequest, options?: RpcOptions): UnaryCall<ListDevicesRequest, ListDevicesResponse>;
    /**
     * @generated from protobuf rpc: GetDeviceStatus(smarthome.DeviceStatusRequest) returns (smarthome.DeviceStatusResponse);
     */
    getDeviceStatus(input: DeviceStatusRequest, options?: RpcOptions): UnaryCall<DeviceStatusRequest, DeviceStatusResponse>;
}
/**
 * Base service for all devices
 *
 * @generated from protobuf service smarthome.DeviceManager
 */
export class DeviceManagerClient implements IDeviceManagerClient, ServiceInfo {
    typeName = DeviceManager.typeName;
    methods = DeviceManager.methods;
    options = DeviceManager.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListDevices(smarthome.ListDevicesRequest) returns (smarthome.ListDevicesResponse);
     */
    listDevices(input: ListDevicesRequest, options?: RpcOptions): UnaryCall<ListDevicesRequest, ListDevicesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDevicesRequest, ListDevicesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetDeviceStatus(smarthome.DeviceStatusRequest) returns (smarthome.DeviceStatusResponse);
     */
    getDeviceStatus(input: DeviceStatusRequest, options?: RpcOptions): UnaryCall<DeviceStatusRequest, DeviceStatusResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeviceStatusRequest, DeviceStatusResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * Temperature sensor service
 *
 * @generated from protobuf service smarthome.TemperatureSensor
 */
export interface ITemperatureSensorClient {
    /**
     * @generated from protobuf rpc: GetTemperature(smarthome.TemperatureRequest) returns (smarthome.TemperatureResponse);
     */
    getTemperature(input: TemperatureRequest, options?: RpcOptions): UnaryCall<TemperatureRequest, TemperatureResponse>;
}
/**
 * Temperature sensor service
 *
 * @generated from protobuf service smarthome.TemperatureSensor
 */
export class TemperatureSensorClient implements ITemperatureSensorClient, ServiceInfo {
    typeName = TemperatureSensor.typeName;
    methods = TemperatureSensor.methods;
    options = TemperatureSensor.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetTemperature(smarthome.TemperatureRequest) returns (smarthome.TemperatureResponse);
     */
    getTemperature(input: TemperatureRequest, options?: RpcOptions): UnaryCall<TemperatureRequest, TemperatureResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TemperatureRequest, TemperatureResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * Camera service
 *
 * @generated from protobuf service smarthome.Camera
 */
export interface ICameraClient {
    /**
     * @generated from protobuf rpc: GetImage(smarthome.ImageRequest) returns (smarthome.ImageResponse);
     */
    getImage(input: ImageRequest, options?: RpcOptions): UnaryCall<ImageRequest, ImageResponse>;
    /**
     * @generated from protobuf rpc: ControlPTZ(smarthome.PTZControlRequest) returns (smarthome.PTZControlResponse);
     */
    controlPTZ(input: PTZControlRequest, options?: RpcOptions): UnaryCall<PTZControlRequest, PTZControlResponse>;
}
/**
 * Camera service
 *
 * @generated from protobuf service smarthome.Camera
 */
export class CameraClient implements ICameraClient, ServiceInfo {
    typeName = Camera.typeName;
    methods = Camera.methods;
    options = Camera.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetImage(smarthome.ImageRequest) returns (smarthome.ImageResponse);
     */
    getImage(input: ImageRequest, options?: RpcOptions): UnaryCall<ImageRequest, ImageResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ImageRequest, ImageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ControlPTZ(smarthome.PTZControlRequest) returns (smarthome.PTZControlResponse);
     */
    controlPTZ(input: PTZControlRequest, options?: RpcOptions): UnaryCall<PTZControlRequest, PTZControlResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PTZControlRequest, PTZControlResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * Smart speaker service
 *
 * @generated from protobuf service smarthome.SmartSpeaker
 */
export interface ISmartSpeakerClient {
    /**
     * @generated from protobuf rpc: GetVolume(smarthome.SpeakerRequest) returns (smarthome.SpeakerVolumeResponse);
     */
    getVolume(input: SpeakerRequest, options?: RpcOptions): UnaryCall<SpeakerRequest, SpeakerVolumeResponse>;
    /**
     * @generated from protobuf rpc: SetVolume(smarthome.SpeakerVolumeRequest) returns (google.protobuf.Empty);
     */
    setVolume(input: SpeakerVolumeRequest, options?: RpcOptions): UnaryCall<SpeakerVolumeRequest, Empty>;
    /**
     * @generated from protobuf rpc: PlayAudio(smarthome.SpeakerRequest) returns (google.protobuf.Empty);
     */
    playAudio(input: SpeakerRequest, options?: RpcOptions): UnaryCall<SpeakerRequest, Empty>;
    /**
     * @generated from protobuf rpc: PauseAudio(smarthome.SpeakerRequest) returns (google.protobuf.Empty);
     */
    pauseAudio(input: SpeakerRequest, options?: RpcOptions): UnaryCall<SpeakerRequest, Empty>;
    /**
     * @generated from protobuf rpc: GetAudioStatus(smarthome.SpeakerRequest) returns (smarthome.AudioStatusResponse);
     */
    getAudioStatus(input: SpeakerRequest, options?: RpcOptions): UnaryCall<SpeakerRequest, AudioStatusResponse>;
}
/**
 * Smart speaker service
 *
 * @generated from protobuf service smarthome.SmartSpeaker
 */
export class SmartSpeakerClient implements ISmartSpeakerClient, ServiceInfo {
    typeName = SmartSpeaker.typeName;
    methods = SmartSpeaker.methods;
    options = SmartSpeaker.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetVolume(smarthome.SpeakerRequest) returns (smarthome.SpeakerVolumeResponse);
     */
    getVolume(input: SpeakerRequest, options?: RpcOptions): UnaryCall<SpeakerRequest, SpeakerVolumeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SpeakerRequest, SpeakerVolumeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetVolume(smarthome.SpeakerVolumeRequest) returns (google.protobuf.Empty);
     */
    setVolume(input: SpeakerVolumeRequest, options?: RpcOptions): UnaryCall<SpeakerVolumeRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SpeakerVolumeRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PlayAudio(smarthome.SpeakerRequest) returns (google.protobuf.Empty);
     */
    playAudio(input: SpeakerRequest, options?: RpcOptions): UnaryCall<SpeakerRequest, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SpeakerRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PauseAudio(smarthome.SpeakerRequest) returns (google.protobuf.Empty);
     */
    pauseAudio(input: SpeakerRequest, options?: RpcOptions): UnaryCall<SpeakerRequest, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SpeakerRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAudioStatus(smarthome.SpeakerRequest) returns (smarthome.AudioStatusResponse);
     */
    getAudioStatus(input: SpeakerRequest, options?: RpcOptions): UnaryCall<SpeakerRequest, AudioStatusResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SpeakerRequest, AudioStatusResponse>("unary", this._transport, method, opt, input);
    }
}
